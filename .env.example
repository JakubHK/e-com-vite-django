# -----------------------------------------------------------------------------
# E‑Com Production Environment (.env.example)
# -----------------------------------------------------------------------------
# WARNING
# - Never commit a real .env file with secrets to Git.
# - Copy this file on the server and edit values there:
#     cp .env.example .env
# - Store secrets securely (password manager, secrets manager).
#
# SECURITY CRITICAL
# - Set a long, random SECRET_KEY (50+ chars).
# - Set DEBUG=false in production.
# - Configure ALLOWED_HOSTS and CSRF_TRUSTED_ORIGINS correctly.
# - Use strong Postgres credentials.
# - Restrict SSH to your IP in your cloud firewall (Oracle Security List / NSG).
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Django core
# -----------------------------------------------------------------------------
# Strong random value (do NOT use this example in production)
SECRET_KEY=change-me-please-very-long-random-string

# Production must be false
DEBUG=false

# Comma‑separated list of hosts allowed to serve the app
# Examples:
#   ALLOWED_HOSTS=203.0.113.10,shop.example.com
ALLOWED_HOSTS=YOUR_PUBLIC_IP,your.domain

# Must include scheme (http/https) and host; comma‑separated.
# Examples:
#   CSRF_TRUSTED_ORIGINS=http://203.0.113.10,https://shop.example.com
CSRF_TRUSTED_ORIGINS=http://YOUR_PUBLIC_IP,https://your.domain

# -----------------------------------------------------------------------------
# Database
# -----------------------------------------------------------------------------
# Defaults are provided by docker-compose.yml for local db:
#   DATABASE_URL=postgresql://app:app@db:5432/ecom
# Override with a managed database URL if needed.
# DATABASE_URL=postgresql://USER:PASSWORD@HOST:5432/DBNAME

# If using the bundled Postgres service:
POSTGRES_USER=app
POSTGRES_PASSWORD=change-me-strong
POSTGRES_DB=ecom

# -----------------------------------------------------------------------------
# Gunicorn / runtime tuning (Oracle Ampere Free Tier starting point)
# -----------------------------------------------------------------------------
# Number of worker processes (adjust by CPU/memory and workload)
WEB_CONCURRENCY=2
# Threads per worker (gthread worker)
GUNICORN_THREADS=2
# Request timeout (seconds)
GUNICORN_TIMEOUT=60

# -----------------------------------------------------------------------------
# Feature flags
# -----------------------------------------------------------------------------
# Internal workflow feature (leave true unless you know you need to disable it)
WORKFLOW_ENABLED=true

# -----------------------------------------------------------------------------
# Notes
# -----------------------------------------------------------------------------
# - Static assets:
#   * Vite builds to static/dist with a manifest (see vite.config.mjs).
#   * On start, collectstatic writes to /app/staticfiles (volume).
#   * Nginx serves /static/* from the staticfiles volume in production.
#   * WhiteNoise CompressedManifest storage is enabled for hashed assets/fallback.
#
# - CI/CD secrets (set in GitHub, not here):
#   * SSH_HOST, SSH_USER, SSH_KEY, SSH_PATH
#   * Optional: SSH_PORT (default 22)
#   * If GHCR images are private: GHCR_USERNAME, GHCR_TOKEN (PAT with read:packages)
#
# - Do not expose the database to the public internet.
# - Rotate credentials if you suspect compromise.